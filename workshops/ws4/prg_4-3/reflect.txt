Workshop #4.1: Factory Assembly Line | Reflection ------------------------------
Luca Novello | gnovello ------------------------------

For this part of the workshop, we focused on creating the "Utilities" and "Station" modules. The Utilities class handles input parsing, it can extract tokens from strings using a delimiter.  The Station class manages station details like inventory and item names. The key was ensuring data was read correctly, stored in the right fields, and formatted properly for display. I struggled a bit getting the display right.

Workshop #4.2: Factory Assembly Line | Reflection ------------------------------
Luca Novello | gnovello ------------------------------

In this section, we built the CustomerOrder class to handle customer and order details, including dynamic memory allocation. The constructor parsed customer information, and functions like isOrderFilled() and fillItem() checked if orders were complete and updated item statuses. I had less problems with this section than the previous, maybe I was in a better flow state.

Workshop #4.3: Factory Assembly Line | Reflection ------------------------------
Luca Novello | gnovello ------------------------------

Finally in the last part of the workshop, we combined everything into a functioning assembly line. The Workstation processed orders, and the LineManager class coordinates stations to move orders along. The challenge was ensuring orders transitioned smoothly and were updated at each step. I got stuck debugging why "Unable to fill Rania A., 2-Room Home Office and Bedroom [Desk]" wasn't printing out during the "Line Manager Iteration: 12" of the "Filling Orders" section of the test.  Eventually, after using the debugger in Visual Studio, I realized I was Breaking out of the void CustomerOrder::fillItem(Station& station, std::ostream& os) function at the wrong place and made the correction.  